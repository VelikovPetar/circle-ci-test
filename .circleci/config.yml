# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/configuration-reference
# For a detailed guide to building and testing on Android, read the docs:
# https://circleci.com/docs/language-android/ for more details.
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/orb-intro/
orbs:
  android: circleci/android@1.0.3

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/configuration-reference/#jobs
jobs:
  checkout-and-init-submodules:
    executor: 
      name: android/android-machine
    steps:
      - checkout:
          post:
            git submodule init
            git submodule update
      # - run: 
      #     name: Init submodule
      #     command: |
      #       git submodule init
      #       git submodule update
      - run:
          name: Print submodule content
          command: |
            ls
            ls circleci-sumodule
            cat circleci-sumodule/data.json
  # Below is the definition of your job to build and test your app, you can rename and customize it as you want.
  build-and-test:
    # These next lines define the Android machine image executor.
    # See: https://circleci.com/docs/executor-types/
    executor:
      name: android/android-machine

    # Add steps to the job
    # See: https://circleci.com/docs/configuration-reference/#steps
    steps:
      # Checkout the code as the first step.
      - checkout

      # The next step will run the unit tests
      - android/run-tests:
          test-command: ./gradlew lint testDebug --continue

      # Then start the emulator and run the Instrumentation tests!
      - android/start-emulator-and-run-tests:
          test-command: ./gradlew connectedDebugAndroidTest
          system-image: system-images;android-25;google_apis;x86

      # And finally run the release build
      - run:
          name: Assemble release build
          command: |
            ./gradlew assembleRelease
  # Greeting 1          
  greet:
    executor:
      name: android/android-machine
    steps:
      - run:
          name: Hello World
          command: |
           echo "hello World"
           echo $ANDROID_HOME
  # Greeting 2
  curl-test:
    executor: 
      name: android/android-machine
    steps:
      - run: 
          name: cURL Test
          command: | 
            curl google.com
  # Android docker image test
  android-image-test:
    docker:
      - image: cimg/android:2023.06
    steps:
      - run: |
          echo "Hi from cimg/android:2023.06 docker image!"
          echo $ANDROID_HOME
          java --version
          sdkmanager --version
  release-only-job:
    executor:
      name: android/android-machine
    steps:
      - run: echo "On a release/ branch."
          
            

# Invoke jobs via workflows
# See: https://circleci.com/docs/configuration-reference/#workflows
workflows:
  demo-workflow: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - android-image-test  
  checkout-project:
    jobs:
      - checkout-and-init-submodules
  # Workflow only triggered for release branches  
  release-workflow:
    jobs:
      #- curl-test
      - release-only-job:
          #requires:
            #- curl-test
          filters:
            branches:
              only: /^release\/.*/
